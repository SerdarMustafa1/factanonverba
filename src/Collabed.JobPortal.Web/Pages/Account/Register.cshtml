@page
@using Collabed.JobPortal.Localization;
@using Collabed.JobPortal.Web.Pages.Account;
@using Collabed.JobPortal.Web.Pages.Shared.Components.Input;
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Account.Localization
@model BMTRegisterModel
@inject IHtmlLocalizer<JobPortalResource> L

<abp-script src="/Pages/Account/Register.js" />

<div class="card mt-3 shadow-sm rounded">
    <div class="card-body">
        <h4>@L["Register"]</h4>
        <strong>
            @L["AlreadyRegistered"]
            <a href="@Url.Page("./Login", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-decoration-none">@L["Login"]</a>
        </strong>
        <form method="post">
            @if (!Model.IsExternalLogin)
            {
                @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "text", PropertyName = nameof(Model.UserName), HtmlTitle=Model.UserName, Placeholder = "..."})
            }
            @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "text", PropertyName = nameof(Model.EmailAddress), HtmlTitle=Model.EmailAddress, OnKeyUp = "validateEmail()",
                PrependIcon = "bi bi-envelope", AppendIcon = "bi bi-question-circle"})

            @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "text", PropertyName = nameof(Model.FirstName), HtmlTitle=Model.FirstName, OnKeyUp = "validateRequiredField('FirstName', 'Please type your first name')",
                AppendIcon = "bi bi-question-circle"})

            @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "text", PropertyName = nameof(Model.LastName), HtmlTitle=Model.LastName, OnKeyUp = "validateRequiredField('LastName', 'Please type your last name')",
                AppendIcon = "bi bi-question-circle"})

            @if (!Model.IsExternalLogin)
            {
                @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "password", OnKeyUp="validatePassword()", PropertyName = nameof(Model.Password), HtmlTitle=Model.Password })
                <div>
                    <p id="hintParagraph">Your password must contain:</p>
                    <br />
                    <p><i class="bi bi-dot" id="caseIcon"></i><span id="caseHint">Uppercase and lowercase letters</span></p>
                    <p><i class="bi bi-dot" id="lengthIcon"></i><span id="lengthHint">At least 8 characters</span></p>
                    <p><i class="bi bi-dot" id="nonAlphanumericIcon"></i><span id="nonAlphanumericParagraph">A number and a symbol</span></p>
                </div>
                @await Component.InvokeAsync("Input", new InputViewModel(){ InputType = "password", PropertyName = nameof(Model.ConfirmPassword), HtmlTitle=Model.ConfirmPassword, OnKeyUp = "validateConfirmPassword()"})
            }
            <div class="d-grid gap-2">
                <abp-button button-type="Primary" type="submit" class="btn-lg mt-4">@L["Register"]</abp-button>
            </div>
        </form>

        @if (Model.ExternalProviders.Any())
        {
            <div class="mt-2">
                <h4>@L["RegisterWith"]</h4>
                @foreach (var provider in Model.ExternalProviders)
                {
                    <form asp-page="./Login" asp-page-handler="ExternalLogin" method="post">
                        <button type="submit" class="btn btn-primary m-1" name="provider" value="@provider.AuthenticationScheme" title="@L["RegisterUsingYourProviderAccount", provider.DisplayName]">@provider.DisplayName</button>
                    </form>
                }
            </div>
        }
    </div>
</div>