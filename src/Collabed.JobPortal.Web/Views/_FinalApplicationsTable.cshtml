@using Collabed.JobPortal.Web.Models;
@using Collabed.JobPortal.Types;
@model ApplicationModel

@{
    var totalPagesApplications = Model.Applications.Count > 0 ? (int)Math.Ceiling(decimal.Divide(Model.Applications.Count, Model.PageSize)) : 0;
}
<div class="tab-pane active" id="allApplications">
    <div class="table-responsive">
        <table class="table">
            <thead>
            <tr>
                <th style="width: 20%" scope="Column">
                    @{
                        var classes = "bi bi-chevron-down inactive-bi";
                        var link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=CandidateAsc";
                        switch (Model.SortBy)
                        {
                            case "CandidateAsc":
                                classes = "bi bi-chevron-down active-bi";
                                link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=CandidateDesc";
                                break;
                            case "CandidateDesc":
                                classes = "bi bi-chevron-up active-bi";
                                break;
                        }
                    }
                    <a href="@link" style="text-decoration: none; color: black">Candidate <i class="@classes"></i></a>
                </th>

                <th style="width: 20%" scope="Column">
                    @{
                        var classes = "bi bi-chevron-down inactive-bi";
                        var link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=StatusAsc";
                        switch (Model.SortBy)
                        {
                            case "StatusAsc":
                                classes = "bi bi-chevron-down active-bi";
                                link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=StatusDesc";
                                break;
                            case "StatusDesc":
                                classes = "bi bi-chevron-up active-bi";
                                break;
                        }
                    }
                    <a href="@link" style="text-decoration: none; color: black">Status <i class="@classes"></i></a>
                </th>
                <th style="width: 20%" scope="Column">
                    @{
                        var classes = "bi bi-chevron-up inactive-bi";
                        var link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=RatingDesc";
                        switch (Model.SortBy)
                        {
                            case "RatingAsc":
                                classes = "bi bi-chevron-down active-bi";
                                link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=RatingDesc";
                                break;
                            case "RatingDesc":
                                link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage}&Tab={Model.Tab}&SortBy=RatingAsc";
                                classes = "bi bi-chevron-up active-bi";
                                break;
                        }
                    }
                    <a href="@link" style="text-decoration: none; color: black">Rating <i class="@classes"></i></a>
                </th>
                <th style="width: 20%" scope="Column" colspan="2">Actions</th>
                <th style="width: 20%" scope="Column" colspan="2">Notify Results</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var application in Model.Applications)
            {
                <tr id="@application.JobApplicationId">
                    <td scope="Row">
                        <a class="edit-link" href="~/applicant?reference=@application.Reference">@application.CandidateName</a>
                    </td>
                    <td id="@("status" + application.JobApplicationId)">@application.GetTextStatus()</td>
                    <td>
                        <div class="form-group" style="width: 50%;">
                            @Html.DropDownListFor(c => application.Rating, Model.Ratings, " - ", new { id = $"rating{application.Reference}", @class = "form-select", data_live_search = "true", onchange = $"updateApplicantRating('{application.Reference}')" })
                        </div>
                    </td>
                    <td>
                        <a id="@("hire" + application.JobApplicationId)" class="edit-link hire-link" href="#" onclick="onHire('@application.JobApplicationId', '@Model.Reference')">Hire</a>
                    </td>
                    <td>
                        <a id="@("reject" + application.JobApplicationId)" class="delete-link" href="#" onclick="onReject('@application.JobApplicationId')">Reject</a>
                    </td>
                    <td>
                        <a class="edit-link @(string.IsNullOrWhiteSpace(application.CandidatePhoneNumber) ? "link-disabled" : "") @(Model.CanHireApplicants ? "" : "link-disabled")" href="@(string.IsNullOrWhiteSpace(application.CandidatePhoneNumber) ? "" : $"tel:{application.CandidatePhoneNumber}")" onclick="onHire('@application.JobApplicationId')">Call</a>
                    </td>
                    <td>
                        <a class="edit-link" href="@($"mailto:{application.CandidateEmail}")">Email</a>
                    </td>
                </tr>
            }
            @if (Model.Applications.Count == 0)
            {
                <tr>
                    <td scope="Row" colspan="2" style="border-bottom-width: 0">No applications submitted.</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="clientsPaginationContainer">
        <ul class="pagination">
            @if (Model.CurrentPage > 1)
            {
                var link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage - 1}&Tab={Model.Tab}&SortBy={Model.SortBy}";
                <li class="page-item">
                    <a href=@link class="page-link">
                        <i class="bi bi-chevron-left"></i>
                    </a>
                </li>
            }

            @for (var i = 1; i <= totalPagesApplications; i++)
            {
                var shouldDisplayPage = i == 1 || i == totalPagesApplications ||
                                        (i >= Model.CurrentPage - 2 && i <= Model.CurrentPage + 2);
                var isEllipsisBefore = i == Model.CurrentPage - 3;
                var isEllipsisAfter = i == Model.CurrentPage + 3;

                if (shouldDisplayPage || isEllipsisBefore || isEllipsisAfter)
                {
                    var link = $"?Reference={Model.Reference}&CurrentPage={i}&Tab={Model.Tab}&SortBy={Model.SortBy}";

                    if (isEllipsisBefore || isEllipsisAfter)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a href=@link class="page-link">@i</a>
                        </li>
                    }
                }
            }
            @if (Model.CurrentPage < totalPagesApplications)
            {
                var link = $"?Reference={Model.Reference}&CurrentPage={Model.CurrentPage + 1}&Tab={Model.Tab}&SortBy={Model.SortBy}";
                <li class="page-item">
                    <a href=@link class="page-link">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            }
        </ul>
    </div>
</div>